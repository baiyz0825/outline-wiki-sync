// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/baiyz0825/outline-wiki-sync/model"
)

func newFileSyncRecord(db *gorm.DB, opts ...gen.DOOption) fileSyncRecord {
	_fileSyncRecord := fileSyncRecord{}

	_fileSyncRecord.fileSyncRecordDo.UseDB(db, opts...)
	_fileSyncRecord.fileSyncRecordDo.UseModel(&model.FileSyncRecord{})

	tableName := _fileSyncRecord.fileSyncRecordDo.TableName()
	_fileSyncRecord.ALL = field.NewAsterisk(tableName)
	_fileSyncRecord.Id = field.NewString(tableName, "id")
	_fileSyncRecord.OutlineWikiId = field.NewString(tableName, "outline_wiki_id")
	_fileSyncRecord.CollectionId = field.NewString(tableName, "collection_id")
	_fileSyncRecord.FileName = field.NewString(tableName, "file_name")
	_fileSyncRecord.FileSize = field.NewFloat64(tableName, "file_size")
	_fileSyncRecord.FilePath = field.NewString(tableName, "file_path")
	_fileSyncRecord.FileContent = field.NewString(tableName, "file_content")
	_fileSyncRecord.Sync = field.NewBool(tableName, "sync")
	_fileSyncRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_fileSyncRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fileSyncRecord.Deleted = field.NewField(tableName, "deleted")

	_fileSyncRecord.fillFieldMap()

	return _fileSyncRecord
}

type fileSyncRecord struct {
	fileSyncRecordDo fileSyncRecordDo

	ALL           field.Asterisk
	Id            field.String
	OutlineWikiId field.String
	CollectionId  field.String
	FileName      field.String
	FileSize      field.Float64
	FilePath      field.String
	FileContent   field.String
	Sync          field.Bool
	CreatedAt     field.Time
	UpdatedAt     field.Time
	Deleted       field.Field

	fieldMap map[string]field.Expr
}

func (f fileSyncRecord) Table(newTableName string) *fileSyncRecord {
	f.fileSyncRecordDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileSyncRecord) As(alias string) *fileSyncRecord {
	f.fileSyncRecordDo.DO = *(f.fileSyncRecordDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileSyncRecord) updateTableName(table string) *fileSyncRecord {
	f.ALL = field.NewAsterisk(table)
	f.Id = field.NewString(table, "id")
	f.OutlineWikiId = field.NewString(table, "outline_wiki_id")
	f.CollectionId = field.NewString(table, "collection_id")
	f.FileName = field.NewString(table, "file_name")
	f.FileSize = field.NewFloat64(table, "file_size")
	f.FilePath = field.NewString(table, "file_path")
	f.FileContent = field.NewString(table, "file_content")
	f.Sync = field.NewBool(table, "sync")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.Deleted = field.NewField(table, "deleted")

	f.fillFieldMap()

	return f
}

func (f *fileSyncRecord) WithContext(ctx context.Context) IFileSyncRecordDo {
	return f.fileSyncRecordDo.WithContext(ctx)
}

func (f fileSyncRecord) TableName() string { return f.fileSyncRecordDo.TableName() }

func (f fileSyncRecord) Alias() string { return f.fileSyncRecordDo.Alias() }

func (f *fileSyncRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileSyncRecord) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.Id
	f.fieldMap["outline_wiki_id"] = f.OutlineWikiId
	f.fieldMap["collection_id"] = f.CollectionId
	f.fieldMap["file_name"] = f.FileName
	f.fieldMap["file_size"] = f.FileSize
	f.fieldMap["file_path"] = f.FilePath
	f.fieldMap["file_content"] = f.FileContent
	f.fieldMap["sync"] = f.Sync
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted"] = f.Deleted
}

func (f fileSyncRecord) clone(db *gorm.DB) fileSyncRecord {
	f.fileSyncRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileSyncRecord) replaceDB(db *gorm.DB) fileSyncRecord {
	f.fileSyncRecordDo.ReplaceDB(db)
	return f
}

type fileSyncRecordDo struct{ gen.DO }

type IFileSyncRecordDo interface {
	gen.SubQuery
	Debug() IFileSyncRecordDo
	WithContext(ctx context.Context) IFileSyncRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileSyncRecordDo
	WriteDB() IFileSyncRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileSyncRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileSyncRecordDo
	Not(conds ...gen.Condition) IFileSyncRecordDo
	Or(conds ...gen.Condition) IFileSyncRecordDo
	Select(conds ...field.Expr) IFileSyncRecordDo
	Where(conds ...gen.Condition) IFileSyncRecordDo
	Order(conds ...field.Expr) IFileSyncRecordDo
	Distinct(cols ...field.Expr) IFileSyncRecordDo
	Omit(cols ...field.Expr) IFileSyncRecordDo
	Join(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo
	Group(cols ...field.Expr) IFileSyncRecordDo
	Having(conds ...gen.Condition) IFileSyncRecordDo
	Limit(limit int) IFileSyncRecordDo
	Offset(offset int) IFileSyncRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileSyncRecordDo
	Unscoped() IFileSyncRecordDo
	Create(values ...*model.FileSyncRecord) error
	CreateInBatches(values []*model.FileSyncRecord, batchSize int) error
	Save(values ...*model.FileSyncRecord) error
	First() (*model.FileSyncRecord, error)
	Take() (*model.FileSyncRecord, error)
	Last() (*model.FileSyncRecord, error)
	Find() ([]*model.FileSyncRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileSyncRecord, err error)
	FindInBatches(result *[]*model.FileSyncRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileSyncRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileSyncRecordDo
	Assign(attrs ...field.AssignExpr) IFileSyncRecordDo
	Joins(fields ...field.RelationField) IFileSyncRecordDo
	Preload(fields ...field.RelationField) IFileSyncRecordDo
	FirstOrInit() (*model.FileSyncRecord, error)
	FirstOrCreate() (*model.FileSyncRecord, error)
	FindByPage(offset int, limit int) (result []*model.FileSyncRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileSyncRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileSyncRecordDo) Debug() IFileSyncRecordDo {
	return f.withDO(f.DO.Debug())
}

func (f fileSyncRecordDo) WithContext(ctx context.Context) IFileSyncRecordDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileSyncRecordDo) ReadDB() IFileSyncRecordDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileSyncRecordDo) WriteDB() IFileSyncRecordDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileSyncRecordDo) Session(config *gorm.Session) IFileSyncRecordDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileSyncRecordDo) Clauses(conds ...clause.Expression) IFileSyncRecordDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileSyncRecordDo) Returning(value interface{}, columns ...string) IFileSyncRecordDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileSyncRecordDo) Not(conds ...gen.Condition) IFileSyncRecordDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileSyncRecordDo) Or(conds ...gen.Condition) IFileSyncRecordDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileSyncRecordDo) Select(conds ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileSyncRecordDo) Where(conds ...gen.Condition) IFileSyncRecordDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileSyncRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFileSyncRecordDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f fileSyncRecordDo) Order(conds ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileSyncRecordDo) Distinct(cols ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileSyncRecordDo) Omit(cols ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileSyncRecordDo) Join(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileSyncRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileSyncRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileSyncRecordDo) Group(cols ...field.Expr) IFileSyncRecordDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileSyncRecordDo) Having(conds ...gen.Condition) IFileSyncRecordDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileSyncRecordDo) Limit(limit int) IFileSyncRecordDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileSyncRecordDo) Offset(offset int) IFileSyncRecordDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileSyncRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileSyncRecordDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileSyncRecordDo) Unscoped() IFileSyncRecordDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileSyncRecordDo) Create(values ...*model.FileSyncRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileSyncRecordDo) CreateInBatches(values []*model.FileSyncRecord, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileSyncRecordDo) Save(values ...*model.FileSyncRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileSyncRecordDo) First() (*model.FileSyncRecord, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileSyncRecord), nil
	}
}

func (f fileSyncRecordDo) Take() (*model.FileSyncRecord, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileSyncRecord), nil
	}
}

func (f fileSyncRecordDo) Last() (*model.FileSyncRecord, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileSyncRecord), nil
	}
}

func (f fileSyncRecordDo) Find() ([]*model.FileSyncRecord, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileSyncRecord), err
}

func (f fileSyncRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileSyncRecord, err error) {
	buf := make([]*model.FileSyncRecord, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileSyncRecordDo) FindInBatches(result *[]*model.FileSyncRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileSyncRecordDo) Attrs(attrs ...field.AssignExpr) IFileSyncRecordDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileSyncRecordDo) Assign(attrs ...field.AssignExpr) IFileSyncRecordDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileSyncRecordDo) Joins(fields ...field.RelationField) IFileSyncRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileSyncRecordDo) Preload(fields ...field.RelationField) IFileSyncRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileSyncRecordDo) FirstOrInit() (*model.FileSyncRecord, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileSyncRecord), nil
	}
}

func (f fileSyncRecordDo) FirstOrCreate() (*model.FileSyncRecord, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileSyncRecord), nil
	}
}

func (f fileSyncRecordDo) FindByPage(offset int, limit int) (result []*model.FileSyncRecord, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileSyncRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileSyncRecordDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileSyncRecordDo) Delete(models ...*model.FileSyncRecord) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileSyncRecordDo) withDO(do gen.Dao) *fileSyncRecordDo {
	f.DO = *do.(*gen.DO)
	return f
}
